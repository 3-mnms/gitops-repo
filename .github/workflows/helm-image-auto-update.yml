name: "üîÑ Helm Ïù¥ÎØ∏ÏßÄ ÌÉúÍ∑∏ ÏûêÎèô Î∞òÏòÅ"
run-name: >
  üîÑ ${{ github.event.client_payload.service || inputs.service }}
  ‚Äì ${{ github.event.client_payload.tag || inputs.tag }}
  (targets: ${{ github.event.client_payload.targets || inputs.targets || github.event.client_payload.env || inputs.env || 'develop-gke' }})

on:
  repository_dispatch:
    types: [ image-updated ]
  workflow_dispatch:
    inputs:
      service:
        required: false
        description: "booking|festival|festival-ai|payment|gateway|user|nginx-client|nginx-mobile"
      image:
        required: false
        description: "ex) rookiesdogun/api-booking"
      tag:
        required: false
        description: "ex) v20250812010101"
      env:
        required: false
        description: "develop-gke|develop-aws|prod (Îã®Ïùº)"
      targets:
        required: false
        description: "CSV: develop-gke,develop-aws ÎòêÎäî prod"

permissions:
  contents: write

concurrency:
  group: "patch-${{ github.event.client_payload.service || inputs.service }}-${{ github.event.client_payload.targets || inputs.targets || github.event.client_payload.env || inputs.env || 'develop-gke' }}"
  cancel-in-progress: true

jobs:
  patch:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (shallow)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install tools (yq, jq)
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.44.3/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq
          sudo apt-get update -y
          sudo apt-get install -y jq
          yq --version; jq --version

      - name: Resolve inputs ‚Üí TARGETS
        id: cfg
        env:
          IN_SVC:   ${{ github.event.client_payload.service || inputs.service }}
          IN_IMG:   ${{ github.event.client_payload.image   || inputs.image }}
          IN_TAG:   ${{ github.event.client_payload.tag     || inputs.tag }}
          IN_ENV:   ${{ github.event.client_payload.env     || inputs.env }}
          IN_TGTS:  ${{ github.event.client_payload.targets || inputs.targets }}
        run: |
          set -euo pipefail

          svc="${IN_SVC:-}"
          img="${IN_IMG:-}"
          tag="${IN_TAG:-}"
          env_in="${IN_ENV:-}"
          tgts_csv="${IN_TGTS:-}"
          
          echo "Inputs: svc=$svc img=$img tag=$tag env=$env_in tgts=$tgts_csv"
          
          [ -n "$svc" ] || { echo "‚ùå service empty"; exit 1; }
          [ -n "$img" ] || { echo "‚ùå image empty"; exit 1; }
          [ -n "$tag" ] || { echo "‚ùå tag empty"; exit 1; }

          # targets Ïö∞ÏÑ†, ÏóÜÏúºÎ©¥ env ÏÇ¨Ïö©, env=develop Ïù¥Î©¥ develop-gke,develop-aws ÎèôÏãú Ï≤òÎ¶¨
          if [ -n "$tgts_csv" ]; then
            IFS=',' read -r -a TARGETS <<<"$(echo "$tgts_csv" | tr -d ' ')"
          else
            case "${env_in:-}" in
              develop) TARGETS=("develop-gke" "develop-aws") ;;
              develop-gke|develop-aws|prod) TARGETS=("$env_in") ;;
              "" ) TARGETS=("develop-gke") ;;
              * ) echo "‚ùå invalid env: $env_in"; exit 1 ;;
            esac
          fi

          DEV_TARGETS=()
          PROD_TARGETS=()
          for t in "${TARGETS[@]}"; do
            case "$t" in
              develop-gke|develop-aws) DEV_TARGETS+=("$t") ;;
              prod) PROD_TARGETS+=("$t") ;;
              *) echo "‚ùå invalid target: $t"; exit 1 ;;
            esac
          done

          echo "service=$svc"  >> $GITHUB_OUTPUT
          echo "image=$img"    >> $GITHUB_OUTPUT
          echo "tag=$tag"      >> $GITHUB_OUTPUT
          printf "%s" "${DEV_TARGETS[*]-}"  | sed 's/ /,/g' | awk '{print "dev_targets="$0}'   >> $GITHUB_OUTPUT
          printf "%s" "${PROD_TARGETS[*]-}" | sed 's/ /,/g' | awk '{print "prod_targets="$0}'  >> $GITHUB_OUTPUT

          echo "Resolved targets: DEV=[${DEV_TARGETS[*]-}] PROD=[${PROD_TARGETS[*]-}]"

      - name: Patch develop branch targets (multi-file, single commit)
        if: ${{ steps.cfg.outputs.dev_targets != '' }}
        env:
          SERVICE:      ${{ steps.cfg.outputs.service }}
          IMAGE:        ${{ steps.cfg.outputs.image }}
          TAG:          ${{ steps.cfg.outputs.tag }}
          DEV_TARGETS:  ${{ steps.cfg.outputs.dev_targets }}
        run: |
          set -euo pipefail
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config user.name  "github-actions[bot]"

          for i in 1 2 3 4 5; do
            echo "::group::develop sync attempt #$i"
            git fetch origin develop
            git checkout develop
            git rebase origin/develop || { echo "Rebase failed"; exit 1; }

            changed=0
            declare -A SEEN=()

            IFS=',' read -r -a TARGETS <<<"$DEV_TARGETS"
            for env in "${TARGETS[@]}"; do
              svc="${SERVICE}"
              case "$svc" in
                booking|festival|payment|gateway|user)
                  file="values/api/${svc}/values-${env}.yaml"
                  root="api$(echo "$svc" | sed 's/^\(.\)/\U\1/')"
                  ;;
                festival-ai)
                  file="values/api/festival/values-${env}.yaml"
                  root="apiFestivalAi"
                  ;;
                nginx-client)
                  # üîß develop-* ÏùÄ 'develop' ÌååÏùºÎ°ú Îß§Ìïë
                  if [ "$env" = "prod" ]; then env_file="prod"; else env_file="develop"; fi
                  file="values/nginx-client/values-${env_file}.yaml"
                  root="nginxClient"
                  ;;
                nginx-mobile)
                  if [ "$env" = "prod" ]; then env_file="prod"; else env_file="develop"; fi
                  file="values/nginx-client/values-${env_file}.yaml"
                  root="nginxClientMobile"
                  ;;
                *) echo "‚ùå Unknown service: $svc"; exit 1 ;;
              esac

              [ -f "$file" ] || { echo "‚ùå Not found: $file"; exit 1; }

              # Í∞ôÏùÄ ÌååÏùº Ï§ëÎ≥µ Ìå®Ïπò Î∞©ÏßÄ (Ïòà: gke+aws ‚Üí develop ÌïòÎÇòÏùò ÌååÏùº)
              if [ -n "${SEEN[$file]+x}" ]; then
                echo "‚Ü©Ô∏è  skip duplicate file $file (already patched)"
                continue
              fi
              SEEN[$file]=1

              repo_only="${IMAGE##*/}"
              if [ -z "$root" ]; then bpath='.image'; else bpath=".[\"${root}\"].image"; fi

              if yq -e "${bpath} | has(\"registry\")" "$file" >/dev/null 2>&1; then
                yq -i "
                  ${bpath}.repository = \"${repo_only}\" |
                  ${bpath}.tag        = \"${TAG}\"
                " "$file"
              else
                yq -i "
                  ${bpath}.repository = \"${IMAGE}\" |
                  ${bpath}.tag        = \"${TAG}\"
                " "$file"
              fi
              echo "‚úÖ [$env] -> $file : $(yq -r "${bpath}" "$file")"
              git add "$file"
              changed=1
            done

            if [ "$changed" -eq 1 ]; then
              git commit -m "chore(values): ${SERVICE} tag ‚Üí ${TAG} [envs:${DEV_TARGETS}] (develop)"
              if git push origin HEAD:develop; then
                echo "::endgroup::"; break
              fi
              echo "::endgroup:: push failed; retry..."
              sleep $((RANDOM % 5 + 2))
            else
              echo "::endgroup:: No changes"; break
            fi
          done

      - name: Patch main branch target (prod)
        if: ${{ steps.cfg.outputs.prod_targets != '' }}
        env:
          SERVICE:      ${{ steps.cfg.outputs.service }}
          IMAGE:        ${{ steps.cfg.outputs.image }}
          TAG:          ${{ steps.cfg.outputs.tag }}
          PROD_TARGETS: ${{ steps.cfg.outputs.prod_targets }}
        run: |
          set -euo pipefail
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config user.name  "github-actions[bot]"

          for i in 1 2 3 4 5; do
            echo "::group::main sync attempt #$i"
            git fetch origin main
            git checkout main
            git rebase origin/main || { echo "Rebase failed"; exit 1; }

            changed=0
            IFS=',' read -r -a TARGETS <<<"$PROD_TARGETS"
            for env in "${TARGETS[@]}"; do
              [ "$env" = "prod" ] || { echo "skip unknown prod target: $env"; continue; }
              svc="${SERVICE}"
              case "$svc" in
                booking|festival|payment|gateway|user)
                  file="values/api/${svc}/values-${env}.yaml"
                  root="api$(echo "$svc" | sed 's/^\(.\)/\U\1/')"
                  ;;
                festival-ai)
                  file="values/api/festival/values-${env}.yaml"
                  root="apiFestivalAi"
                  ;;
                nginx-client)
                  file="values/nginx-client/values-prod.yaml"
                  root="nginxClient"
                  ;;
                nginx-mobile)
                  file="values/nginx-client/values-prod.yaml"
                  root="nginxClientMobile"
                  ;;
                *) echo "‚ùå Unknown service: $svc"; exit 1 ;;
              esac

              [ -f "$file" ] || { echo "‚ùå Not found: $file"; exit 1; }

              repo_only="${IMAGE##*/}"
              if [ -z "$root" ]; then bpath='.image'; else bpath=".[\"${root}\"].image"; fi

              if yq -e "${bpath} | has(\"registry\")" "$file" >/dev/null 2>&1; then
                yq -i "
                  ${bpath}.repository = \"${repo_only}\" |
                  ${bpath}.tag        = \"${TAG}\"
                " "$file"
              else
                yq -i "
                  ${bpath}.repository = \"${IMAGE}\" |
                  ${bpath}.tag        = \"${TAG}\"
                " "$file"
              fi
              echo "‚úÖ [prod] -> $file : $(yq -r "${bpath}" "$file")"
              git add "$file"
              changed=1
            done

            if [ "$changed" -eq 1 ]; then
              git commit -m "chore(values): ${SERVICE} tag ‚Üí ${TAG} [envs:${PROD_TARGETS}] (main)"
              if git push origin HEAD:main; then
                echo "::endgroup::"; break
              fi
              echo "::endgroup:: push failed; retry..."
              sleep $((RANDOM % 5 + 2))
            else
              echo "::endgroup:: No changes"; break
            fi
          done
