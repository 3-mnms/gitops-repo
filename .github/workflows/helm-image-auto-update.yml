name: "🔄 Helm 이미지 태그 자동 반영"
run-name: "🔄 ${{ github.event.client_payload.service || inputs.service }} – ${{ github.event.client_payload.tag || inputs.tag }} (${{ github.event.client_payload.env || inputs.env || 'develop' }})"

on:
  repository_dispatch:
    types: [ image-updated ]
  workflow_dispatch:
    inputs:
      service:
        required: false
        description: "booking|festival|payment|gateway|user|nginx-client|fe-admin"
      image:
        required: false
        description: "ex) rookiesdogun/api-booking"
      tag:
        required: false
        description: "ex) v20250812010101"
      env:
        required: false
        description: "develop|prod"
        default: "develop"

permissions:
  contents: write

concurrency:
  group: "patch-${{ github.event.client_payload.service || inputs.service }}-${{ github.event.client_payload.env || inputs.env || 'develop' }}"
  cancel-in-progress: true

jobs:
  patch:
    runs-on: ubuntu-latest
    steps:
      - name: Resolve env & branch
        id: cfg
        run: |
          ENV="${{ github.event.client_payload.env || inputs.env || 'develop' }}"
          if [ "$ENV" = "prod" ]; then BR="main"; else BR="develop"; fi
          echo "env=$ENV"   >> $GITHUB_OUTPUT
          echo "branch=$BR" >> $GITHUB_OUTPUT

      - name: Checkout target branch
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.cfg.outputs.branch }}

      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.44.3/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq
          yq --version

      - name: Map service → file & root (normalize alias)
        id: map
        env:
          IN_SVC: ${{ github.event.client_payload.service || inputs.service }}
          ENV:    ${{ steps.cfg.outputs.env }}
        run: |
          set -euo pipefail
          svc_in="${IN_SVC:-}"
          env="${ENV}"

          # 1) alias 정규화: fe-user → nginx-client
          case "$svc_in" in
            fe-user) svc="nginx-client" ;;
            *)       svc="$svc_in"      ;;
          esac

          # 2) 서비스별 values 파일/루트키 매핑
          case "$svc" in
            booking|festival|payment|gateway|user)
              file="values/api/${svc}/values-${env}.yaml"
              root="api$(echo "$svc" | sed 's/^\(.\)/\U\1/')"
              ;;
            nginx-client)
              file="values/nginx-client/values-${env}.yaml"
              root="nginxClient"
              ;;
            fe-admin)
              file="values/nginx-admin/values-${env}.yaml"
              root="nginxAdmin"
              ;;
            "")
              echo "❌ service is empty"; exit 1 ;;
            *)
              echo "❌ Unknown service: $svc (input: ${svc_in})"; exit 1 ;;
          esac

          echo "svc_eff=$svc" >> $GITHUB_OUTPUT
          echo "file=$file"   >> $GITHUB_OUTPUT
          echo "root=$root"   >> $GITHUB_OUTPUT
          echo "Mapped ${svc_in} → ${svc} → $file (root=$root)"

      - name: Ensure file exists
        run: |
          if [ ! -f "${{ steps.map.outputs.file }}" ]; then
            echo "❌ Not found: ${{ steps.map.outputs.file }}"
            exit 1
          fi

      - name: Patch values (repository/tag)
        env:
          IMG:  ${{ github.event.client_payload.image || inputs.image }}
          TAG:  ${{ github.event.client_payload.tag || inputs.tag }}
          FILE: ${{ steps.map.outputs.file }}
          ROOT: ${{ steps.map.outputs.root }}
        run: |
          set -euo pipefail
          [ -n "$IMG" ] || { echo "❌ image is empty"; exit 1; }
          [ -n "$TAG" ] || { echo "❌ tag is empty"; exit 1; }

          REPO_ONLY="${IMG##*/}"
          if [ -z "$ROOT" ]; then BPATH='.image'; else BPATH=".[\"${ROOT}\"].image"; fi

          # registry 키 유무에 따라 repository에 짧은/풀 네임 적용
          if yq -e "${BPATH} | has(\"registry\")" "$FILE" >/dev/null 2>&1; then
            yq -i "
              ${BPATH}.repository = \"${REPO_ONLY}\" |
              ${BPATH}.tag        = \"${TAG}\"
            " "$FILE"
          else
            yq -i "
              ${BPATH}.repository = \"${IMG}\" |
              ${BPATH}.tag        = \"${TAG}\"
            " "$FILE"
          fi

          echo "✅ Patched:" && yq -r "${BPATH}" "$FILE"

      - name: Commit & push
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          branch: ${{ steps.cfg.outputs.branch }}
          commit_message: "chore(values): ${{ steps.map.outputs.svc_eff }} tag → ${{ github.event.client_payload.tag || inputs.tag }} [env:${{ steps.cfg.outputs.env }}]"
          file_pattern: ${{ steps.map.outputs.file }}